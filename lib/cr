default rel
global _i
global _a0
global _a1
global _a2
global _a3
global _a4
global _a5
global _a6
global _a7
global _a8
global _a9
global _a10
global _b0
global _b1
global _b2
global _b3
global _b4
global _b5
global _b6
global _b7
global _b8
global _b9
global _b10
global print
global println
global getString
global getInt
global toString
global __StringADD
global __StringEQ
global __StringNEQ
global __StringLT
global __StringGT
global __StringLEQ
global __StringGEQ
global __StringLength
global __StringSubstring
global __StringParseInt
global __StringOrd
global __ArraySize
global __Global
global main
extern strcmp
extern memcpy
extern malloc
extern puts
extern __printf_chk
extern __sprintf_chk
extern printf
extern malloc
extern strlen
extern __stack_chk_fail
extern __isoc99_scanf
extern strcpy
extern sprintf

    SECTION .text
__Global:
    push rbp
    mov rbp,rsp
    mov rax,rbx
    mov r11,r13
    mov qword [rel _i],0
    mov qword [rel _a0],0
    mov qword [rel _a1],0
    mov qword [rel _a2],0
    mov qword [rel _a3],0
    mov qword [rel _a4],0
    mov qword [rel _a5],0
    mov qword [rel _a6],0
    mov qword [rel _a7],0
    mov qword [rel _a8],0
    mov qword [rel _a9],0
    mov qword [rel _a10],0
    mov qword [rel _b0],0
    mov qword [rel _b1],0
    mov qword [rel _b2],0
    mov qword [rel _b3],0
    mov qword [rel _b4],0
    mov qword [rel _b5],0
    mov qword [rel _b6],0
    mov qword [rel _b7],0
    mov qword [rel _b8],0
    mov qword [rel _b9],0
    mov qword [rel _b10],0
    mov rbx,rax
    mov r13,r11
    mov rsp,rbp
    pop rbp
    ret
main:
    push rbp
    mov rbp,rsp
    sub rsp,32
    mov qword [rbp - 8],r14
    mov qword [rbp - 16],r12
    mov qword [rbp - 24],r13
    call __Global
    mov r11,0
    mov r14,0
    call getInt
    mov r11,rax
    mov r13,r11
    mov qword [rel _i],0
    jmp __L_1
__L_1:
    mov r12,qword [rel _i]
    mov r11,r13
    cmp r12,r11
    setl al
    movzx r11,al
    cmp r11,0
    je __L_2
__L_3:
    mov r11,qword [rel _a0]
    add r11,1
    mov qword [rel _a0],r11
    mov r11,qword [rel _a1]
    add r11,1
    mov qword [rel _a1],r11
    mov r11,qword [rel _a2]
    add r11,1
    mov qword [rel _a2],r11
    mov r11,qword [rel _a0]
    add r11,1
    mov qword [rel _a3],r11
    mov r11,qword [rel _a1]
    add r11,1
    mov qword [rel _a4],r11
    mov r11,qword [rel _a2]
    add r11,1
    mov qword [rel _a5],r11
    mov r11,qword [rel _a0]
    add r11,1
    mov qword [rel _a6],r11
    mov r11,qword [rel _a1]
    add r11,1
    mov qword [rel _a7],r11
    mov r11,qword [rel _a2]
    add r11,1
    mov qword [rel _a8],r11
    mov r11,qword [rel _a0]
    add r11,1
    mov qword [rel _a9],r11
    mov r11,qword [rel _a1]
    add r11,0
    mov qword [rel _a10],r11
    mov r11,qword [rel _i]
    mov rax,r11
    cqo
    mov r11,10000000
    idiv r11
    mov r11,rdx
    cmp r11,0
    sete al
    movzx r11,al
    cmp r11,0
    je __L_4
__L_5:
    mov r11,qword [rel _a0]
    mov qword [rel _b0],r11
    mov r11,qword [rel _a1]
    mov qword [rel _b1],r11
    mov r11,qword [rel _a2]
    mov qword [rel _b2],r11
    mov r11,qword [rel _a3]
    mov qword [rel _b3],r11
    mov r11,qword [rel _a4]
    mov qword [rel _b4],r11
    mov r11,qword [rel _a5]
    mov qword [rel _b5],r11
    mov r11,qword [rel _a6]
    mov qword [rel _b6],r11
    mov r11,qword [rel _a7]
    mov qword [rel _b7],r11
    mov r11,qword [rel _a8]
    mov qword [rel _b8],r11
    mov r11,qword [rel _a9]
    mov qword [rel _b9],r11
    mov r11,qword [rel _a10]
    mov qword [rel _b10],r11
    mov r11,r14
    mov r12,qword [rel _a0]
    add r11,r12
    mov r12,qword [rel _a1]
    add r11,r12
    mov r12,qword [rel _a2]
    add r11,r12
    mov r12,qword [rel _a3]
    add r11,r12
    mov r12,qword [rel _a4]
    add r11,r12
    mov r12,qword [rel _a5]
    add r11,r12
    mov r12,qword [rel _a6]
    add r11,r12
    mov r12,qword [rel _a7]
    add r11,r12
    mov r12,qword [rel _a8]
    add r11,r12
    mov r12,qword [rel _a9]
    add r11,r12
    mov r12,qword [rel _a10]
    add r11,r12
    mov r12,qword [rel _b0]
    add r11,r12
    mov r12,qword [rel _b1]
    add r11,r12
    mov r12,qword [rel _b2]
    add r11,r12
    mov r12,qword [rel _b3]
    add r11,r12
    mov r12,qword [rel _b4]
    add r11,r12
    mov r12,qword [rel _b5]
    add r11,r12
    mov r12,qword [rel _b6]
    add r11,r12
    mov r12,qword [rel _b7]
    add r11,r12
    mov r12,qword [rel _b8]
    add r11,r12
    mov r12,qword [rel _b9]
    add r11,r12
    mov r12,qword [rel _b10]
    add r11,r12
    and r11,2147450879
    mov r14,r11
    jmp __L_4
__L_4:
    jmp __L_6
__L_6:
    mov r11,qword [rel _i]
    add r11,1
    mov qword [rel _i],r11
    jmp __L_1
__L_2:
    mov r11,r14
    mov rdi,r11
    call toString
    mov r11,rax
    mov rdi,r11
    call println
    mov r11,0
    jmp __L_7
__L_7:
    mov r14,qword [rbp - 8]
    mov r12,qword [rbp - 16]
    mov r13,qword [rbp - 24]
    mov rax,r11
    mov rsp,rbp
    pop rbp
    ret

    SECTION .data

__str_1:
    dq 2
		db      5CH, 6EH, 00H

    SECTION .bss

_i:
    resb 8

_a0:
    resb 8

_a1:
    resb 8

_a2:
    resb 8

_a3:
    resb 8

_a4:
    resb 8

_a5:
    resb 8

_a6:
    resb 8

_a7:
    resb 8

_a8:
    resb 8

_a9:
    resb 8

_a10:
    resb 8

_b0:
    resb 8

_b1:
    resb 8

_b2:
    resb 8

_b3:
    resb 8

_b4:
    resb 8

_b5:
    resb 8

_b6:
    resb 8

_b7:
    resb 8

_b8:
    resb 8

_b9:
    resb 8

_b10:
    resb 8


SECTION .text

print:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rax
        mov     edi, L_014
        mov     eax, 0
        call    printf
        nop
        leave
        ret
println:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rdi, rax
        call    puts
        nop
        leave
        ret
getInt:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     rax, qword [fs:abs 28H]
        mov     qword [rbp-8H], rax
        xor     eax, eax
        lea     rax, [rbp-10H]
        mov     rsi, rax
        mov     edi, L_015
        mov     eax, 0
        call    __isoc99_scanf
        mov     rax, qword [rbp-10H]
        mov     rdx, qword [rbp-8H]
        xor     rdx, qword [fs:abs 28H]
        jz      L_002
        call    __stack_chk_fail
L_002:  leave
        ret
getString:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32800
        mov     rax, qword [fs:abs 28H]
        mov     qword [rbp-8H], rax
        xor     eax, eax
        lea     rax, [rbp-8010H]
        mov     rsi, rax
        mov     edi, L_014
        mov     eax, 0
        call    __isoc99_scanf
        lea     rax, [rbp-8010H]
        mov     rdi, rax
        call    strlen
        mov     qword [rbp-8020H], rax
        mov     rax, qword [rbp-8020H]
        add     rax, 8
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-8018H], rax
        mov     rax, qword [rbp-8018H]
        mov     rdx, qword [rbp-8020H]
        mov     qword [rax], rdx
        mov     rax, qword [rbp-8018H]
        lea     rdx, [rax+8H]
        lea     rax, [rbp-8010H]
        mov     rsi, rax
        mov     rdi, rdx
        call    strcpy
        mov     rax, qword [rbp-8018H]
        mov     rcx, qword [rbp-8H]
        xor     rcx, qword [fs:abs 28H]
        jz      L_001
        call    __stack_chk_fail
L_001:  leave
        ret
toString:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword [rbp-18H], rdi
        mov     edi, 32
        call    malloc
        mov     qword [rbp-8H], rax
        mov     rax, qword [rbp-8H]
        lea     rcx, [rax+8H]
        mov     rax, qword [rbp-18H]
        mov     rdx, rax
        mov     esi, L_015
        mov     rdi, rcx
        mov     eax, 0
        call    sprintf
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        mov     qword [rax], rdx
        mov     rax, qword [rbp-8H]
        leave
        ret
__StringSubstring:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        inc     rdx
        mov     qword [rbp-28H], rdi
        mov     qword [rbp-30H], rsi
        mov     qword [rbp-38H], rdx
        mov     rax, qword [rbp-38H]
        sub     rax, qword [rbp-30H]
        mov     qword [rbp-10H], rax
        mov     rax, qword [rbp-10H]
        add     rax, 9
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-8H], rax
        mov     rax, qword [rbp-8H]
        mov     rdx, qword [rbp-10H]
        mov     qword [rax], rdx
        mov     dword [rbp-14H], 0
        jmp     L_004
L_003:  mov     eax, dword [rbp-14H]
        add     eax, 8
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     rax, qword [rbp-30H]
        lea     rcx, [rax+8H]
        mov     eax, dword [rbp-14H]
        cdqe
        add     rax, rcx
        mov     rcx, rax
        mov     rax, qword [rbp-28H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-14H], 1
L_004:  mov     eax, dword [rbp-14H]
        cdqe
        cmp     rax, qword [rbp-10H]
        jl      L_003
        mov     rax, qword [rbp-10H]
        add     rax, 8
        mov     rdx, rax
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        mov     byte [rax], 0
        mov     rax, qword [rbp-8H]
        leave
        ret
__StringLength:
        push    rbp
        mov     rbp, rsp
        mov     qword [rbp-8H], rdi
        mov     rax, qword [rbp-8H]
        mov     rax, qword [rax]
        pop     rbp
        ret
__StringParseInt:
        push    rbp
        mov     rbp, rsp
        mov     qword [rbp-18H], rdi
        mov     qword [rbp-8H], 0
        mov     dword [rbp-0CH], 0
        add     qword [rbp-18H], 8
        mov     rax, qword [rbp-18H]
        movzx   eax, byte [rax]
        cmp     al, 45
        jnz     L_006
        mov     dword [rbp-0CH], 1
        add     qword [rbp-18H], 1
        jmp     L_006
L_005:  mov     rdx, qword [rbp-8H]
        mov     rax, rdx
        shl     rax, 2
        add     rax, rdx
        add     rax, rax
        mov     rdx, rax
        mov     rax, qword [rbp-18H]
        movzx   eax, byte [rax]
        movsx   eax, al
        sub     eax, 48
        cdqe
        add     rax, rdx
        mov     qword [rbp-8H], rax
        add     qword [rbp-18H], 1
L_006:  mov     rax, qword [rbp-18H]
        movzx   eax, byte [rax]
        cmp     al, 47
        jle     L_007
        mov     rax, qword [rbp-18H]
        movzx   eax, byte [rax]
        cmp     al, 57
        jle     L_005
L_007:  cmp     dword [rbp-0CH], 0
        jz      L_008
        mov     rax, qword [rbp-8H]
        neg     rax
        jmp     L_009
L_008:  mov     rax, qword [rbp-8H]
L_009:  pop     rbp
        ret
__StringOrd:
        push    rbp
        mov     rbp, rsp
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        add     rax, 8
        mov     rdx, rax
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        movzx   eax, byte [rax]
        movsx   rax, al
        pop     rbp
        ret
__StringADD:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword [rbp-28H], rdi
        mov     qword [rbp-30H], rsi
        mov     rax, qword [rbp-28H]
        mov     rax, qword [rax]
        mov     qword [rbp-18H], rax
        mov     rax, qword [rbp-30H]
        mov     rax, qword [rax]
        mov     qword [rbp-10H], rax
        mov     rax, qword [rbp-18H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-10H]
        add     rax, rdx
        add     rax, 1
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-8H], rax
        mov     rdx, qword [rbp-18H]
        mov     rax, qword [rbp-10H]
        add     rdx, rax
        mov     rax, qword [rbp-8H]
        mov     qword [rax], rdx
        mov     dword [rbp-20H], 0
        jmp     L_011
L_010:  mov     eax, dword [rbp-20H]
        add     eax, 8
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     eax, dword [rbp-20H]
        add     eax, 8
        movsxd  rcx, eax
        mov     rax, qword [rbp-28H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-20H], 1
L_011:  mov     eax, dword [rbp-20H]
        cdqe
        cmp     rax, qword [rbp-18H]
        jl      L_010
        mov     dword [rbp-1CH], 0
        jmp     L_013
L_012:  mov     rax, qword [rbp-18H]
        lea     rdx, [rax+8H]
        mov     eax, dword [rbp-1CH]
        cdqe
        add     rax, rdx
        mov     rdx, rax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     eax, dword [rbp-1CH]
        add     eax, 8
        movsxd  rcx, eax
        mov     rax, qword [rbp-30H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-1CH], 1
L_013:  mov     eax, dword [rbp-1CH]
        cdqe
        cmp     rax, qword [rbp-10H]
        jl      L_012
        mov     rax, qword [rbp-18H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-10H]
        add     rax, rdx
        mov     rdx, rax
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        mov     byte [rax], 0
        mov     rax, qword [rbp-8H]
        leave
        ret
__StringEQ:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        sete    al
        movzx   eax, al
        leave
        ret
__stringNeq:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        setne   al
        movzx   eax, al
        leave
        ret
__StringLT:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        shr     eax, 31
        movzx   eax, al
        leave
        ret
__StringGT:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        setg    al
        movzx   eax, al
        leave
        ret
__StringLE:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        setle   al
        movzx   eax, al
        leave
        ret
__StringGE:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        not     eax
        shr     eax, 31
        movzx   eax, al
        leave
        ret
__ArraySize:
        push    rbp
        mov     rbp, rsp
        mov     qword [rbp-8H], rdi
        mov     rax, qword [rbp-8H]
        mov     rax, qword [rax]
        pop     rbp
        ret
SECTION .rodata
L_014:
        db 25H, 73H, 00H
L_015:
        db 25H, 6CH, 64H, 00H
L_016:
        db 25H, 6CH, 64H, 0AH, 00H
